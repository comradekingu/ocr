{
  "name": "OCR",
  "tagline": "Nextcloud OCR processing for images and PDF with tesseract-ocr, OCRmyPDF and messaging system for asynchronous purpose.",
  "body": "# Configuration and usage\r\n## General\r\nThe workflow of this app is like the following:\r\nThe nextcloud ocr app is installed within nextcloud via the app installation page. After the installation it will integrate in the files app: In the Nextcloud file list the OCR action is registered as a fileaction like the delete or download action. It will only show, if a file is selected that is compatible to ocr.\r\n\r\n_Please consider, that sometimes after uploading the site has to be refreshed before processing of the newly uploaded files will work (Exception: \"Wrong path parameter.\")._\r\n\r\nOne can click on the ocr action button and a overlay option menu will appear (if everything is installed correctly. e.g. tesseract languages). It will give the option to select a language. Tesseract will process the file with the chosen language after one clicked \"process\".\r\n\r\n**Depending on the filesize, especially when processing a pdf, the ocr process is a long running process (tested with 120KB -> 10s). It is absolutely recommended to do nothing with the files which are processed in nextcloud until processing finishes.**\r\n\r\n## Detailed workflow\r\nIn detail (see picture below) the app will send a message via the message queueing capabilities of php in the background and adds it to a message queue (also called 'message channel'). Nothing else. The ocr processing will not be triggered as long as there is no OCRWorker up and running (For details see usage chapter). You can run as much OCRWorkers as you want to (it will give you parallelism capability in order to process big load faster). The worker waits for messages by the nextcloud ocr app on the message queue. The worker will start the ocr process for a specific file (information given by the message of the nextcloud ocr app). The worker will call ocrmypdf or tesseract, inform nextcloud via occ command that the ocr result is available and after finishing it will wait for the next message in order to do the same again.\r\n\r\n![Message Queue](http://www.enterpriseintegrationpatterns.com/img/MessageChannelSolution.gif)\r\n\r\nThe app constantly checks for the status of the process and will notify the user on the nextcloud once the process finished.\r\n\r\n## Configuration\r\n### Manual Command / Cronjob\r\nAfter you have installed all dependencies and the app itself, you will have to get the OCRWorker running in a seperate process (beside your server / nginx / apache). The worker is located in the *worker* directory of the ocr app directory (*server/apps/ocr/worker*). The user of the webserver (which is running nextcliud) has to start the file *OCRWorker.php* with the *php* command like follows:\r\n\r\n``php OCRWorker.php``\r\n\r\n**Please make sure, that you start this command with the user of your webserver (the one that runs nextcloud).**\r\n\r\n*Also have in mind that you could use something like a cronjob for reinitialization after restart and `nohup` for executing still after you leave the shell or logout. Example:*\r\n\r\n``sudo -u www-data nohup php /var/www/nextcloud/apps/ocr/worker/OCRWorker.php >/dev/null 2>&1 &``\r\n\r\n### Usage with Supervisor\r\nThis is an example of a Supervisor configuration. Add it to your Supervisor configuration file (E.G. `/etc/supervisord.conf`).\r\n\r\n````\r\n    [program:myworker]\r\n    command=php /path/to/server/apps/OCRWorker.php start --daemon=false\r\n    numprocs=12\r\n    autostart=true\r\n    autorestart=true\r\n````\r\n\r\n**Gearman is not longer supported and used**\r\n\r\n## Screenshots and example usage\r\nThe OCR app gives you much more possibilities for your personal organization.\r\n\r\n![Screenshot](https://raw.githubusercontent.com/janis91/ocr/master/screenshots/sc1.png)\r\n\r\n_With OCR you will be able to process all your images and pdf files in order to get the characters in it optically recognized and transformed to a txt file or another pdf which has now a text layer, allowing it to be searched._\r\n\r\n![Screenshot](https://raw.githubusercontent.com/janis91/ocr/master/screenshots/sc2.png)\r\n\r\n![Screenshot](https://raw.githubusercontent.com/janis91/ocr/master/screenshots/sc3.png)\r\n\r\n_The great benefit of OCR: It is processing absolutely asynchronous in the background._\r\n\r\n### Have fun with OCR",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}